# authomatic
[![Build Status](https://travis-ci.org/wearereasonablepeople/authomatic.svg?branch=master)](https://travis-ci.org/wearereasonablepeople/authomatic)
[![Maintainability](https://api.codeclimate.com/v1/badges/314b595549aca68c5c6c/maintainability)](https://codeclimate.com/github/wearereasonablepeople/authomatic/maintainability)
[![Test Coverage](https://api.codeclimate.com/v1/badges/314b595549aca68c5c6c/test_coverage)](https://codeclimate.com/github/wearereasonablepeople/authomatic/test_coverage)
[![dependencies Status](https://david-dm.org/wearereasonablepeople/authomatic/status.svg)](https://david-dm.org/wearereasonablepeople/authomatic)
[![devDependencies Status](https://david-dm.org/awearereasonablepeople/authomatic/dev-status.svg)](https://david-dm.org/wearereasonablepeople/authomatic?type=dev)

## Description
An opinionated JWT library with sensible defaults that supports refresh and access tokens.

## Install
```
npm install authomatic
```

## Available stores
[Redis](https://github.com/wearereasonablepeople/authomatic-redis)

Please create an issue if you need another store.

## Examples
[Koa Example](/examples/koa.js)

## Quickstart
```javascript
const Store = require('authomatic-redis');
const Authomatic = require('authomatic');
const store = Store();
const authomatic = new Authomatic({store});

// Use authomatic functions
```

## Test
```
npm test
```

# Documentation

{{>main}}

# Creating a store
If you want to create a new store you need to expose the following functions:

1- registerTokens

```js
/**
* Register access token and refresh token for a user
* @param {String} userId
* @param {String} refreshToken
* @param {String} accessToken
* @param {Number} ttl time to live in ms
* @returns {Promise<Boolean>} returns true when created.
*/
function registerTokens(userId, refreshToken, accessToken, ttl){...}
```

2- getAccessToken
```js
/**
* Returns the user's token using the userId and the refresh token
* @param userId
* @param refreshToken
* @returns {Promise<String>} the access token if found or null
*/
function getAccessToken(userId, refreshToken) {...}
```

3- remove
```js
/**
* Remove a single refresh token from the user
* @param userId
* @param refreshToken
* @returns {Promise<Boolean>} true if found and deleted, otherwise false.
*/
function remove(userId, refreshToken) {...}
```

4- removeAll
```js
/**
* Removes all tokens for a particular user
* @param userId
* @returns {Promise<Boolean>} true if any were found and delete, false otherwise
*/
function remove(userId, refreshToken) {...}
```
You may need to expose a reference to the store if the user may need to handle connections during testing for example.
